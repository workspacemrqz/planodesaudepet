#!/usr/bin/env node

import { fileURLToPath } from 'url';
import { dirname, join } from 'path';
import { existsSync, readdirSync } from 'fs';
import { execSync } from 'child_process';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);
const projectRoot = join(__dirname, '..');

console.log('üîç TESTE DE CONFIGURA√á√ÉO DE PRODU√á√ÉO');
console.log('=' .repeat(50));

// Verificar arquivos de configura√ß√£o
const configFiles = [
  'package.json',
  'easypanel.json', 
  'Procfile',
  '.npmrc',
  'app.json'
];

console.log('\nüìÅ Verificando arquivos de configura√ß√£o:');
configFiles.forEach(file => {
  const exists = existsSync(join(projectRoot, file));
  console.log(`  ${exists ? '‚úÖ' : '‚ùå'} ${file}`);
});

// Verificar estrutura de build
console.log('\nüèóÔ∏è  Testando processo de build:');
try {
  console.log('  üîÑ Executando npm run build...');
  execSync('npm run build', { cwd: projectRoot, stdio: 'pipe' });
  console.log('  ‚úÖ Build executado com sucesso');
  
  // Verificar arquivos gerados
  const distPath = join(projectRoot, 'dist');
  const distPublicPath = join(distPath, 'public');
  const distIndexPath = join(distPath, 'index.js');
  
  console.log('\nüìÇ Verificando arquivos gerados:');
  console.log(`  ${existsSync(distPath) ? '‚úÖ' : '‚ùå'} dist/`);
  console.log(`  ${existsSync(distPublicPath) ? '‚úÖ' : '‚ùå'} dist/public/`);
  console.log(`  ${existsSync(distIndexPath) ? '‚úÖ' : '‚ùå'} dist/index.js`);
  
  if (existsSync(distPublicPath)) {
    const publicFiles = readdirSync(distPublicPath);
    console.log(`  üìã Arquivos em dist/public: ${publicFiles.length} arquivos`);
    
    const assetsPath = join(distPublicPath, 'assets');
    if (existsSync(assetsPath)) {
      const assetFiles = readdirSync(assetsPath);
      console.log(`  üìã Assets compilados: ${assetFiles.length} arquivos`);
    }
  }
  
} catch (error) {
  console.log('  ‚ùå Erro no build:', error.message);
}

// Verificar vari√°veis de ambiente necess√°rias
console.log('\nüîê Vari√°veis de ambiente necess√°rias para EasyPanel:');
const requiredEnvVars = [
  'DATABASE_URL',
  'ADMIN_USER', 
  'ADMIN_PASSWORD',
  'SESSION_SECRET'
];

const optionalEnvVars = [
  'NODE_ENV',
  'PORT',
  'HOST',
  'GOOGLE_CLOUD_PROJECT_ID',
  'GOOGLE_CLOUD_STORAGE_BUCKET'
];

console.log('  üìã Obrigat√≥rias:');
requiredEnvVars.forEach(envVar => {
  const exists = process.env[envVar];
  console.log(`    ${exists ? '‚úÖ' : '‚ùå'} ${envVar}${exists ? ' (configurada)' : ' (n√£o configurada)'}`);
});

console.log('  üìã Opcionais:');
optionalEnvVars.forEach(envVar => {
  const exists = process.env[envVar];
  console.log(`    ${exists ? '‚úÖ' : '‚ûñ'} ${envVar}${exists ? ' (configurada)' : ''}`);
});

// Verificar scripts do package.json
console.log('\nüìú Scripts configurados:');
try {
  const packageJsonPath = join(projectRoot, 'package.json');
  const packageJson = JSON.parse(require('fs').readFileSync(packageJsonPath, 'utf8'));
  
  const requiredScripts = ['build', 'start', 'heroku-postbuild'];
  requiredScripts.forEach(script => {
    const exists = packageJson.scripts[script];
    console.log(`  ${exists ? '‚úÖ' : '‚ùå'} ${script}: ${exists || 'n√£o configurado'}`);
  });
} catch (error) {
  console.log('  ‚ùå Erro ao ler package.json');
}

// Verificar depend√™ncias cr√≠ticas
console.log('\nüì¶ Depend√™ncias cr√≠ticas:');
const criticalDeps = [
  'express',
  'react',
  'vite',
  'drizzle-orm',
  'pg',
  '@neondatabase/serverless'
];

try {
  const packageJsonPath = join(projectRoot, 'package.json');
  const packageJson = JSON.parse(require('fs').readFileSync(packageJsonPath, 'utf8'));
  
  criticalDeps.forEach(dep => {
    const exists = packageJson.dependencies[dep] || packageJson.devDependencies[dep];
    console.log(`  ${exists ? '‚úÖ' : '‚ùå'} ${dep}${exists ? ` (${exists})` : ''}`);
  });
} catch (error) {
  console.log('  ‚ùå Erro ao verificar depend√™ncias');
}

console.log('\n' + '='.repeat(50));
console.log('üéØ RESUMO DA CONFIGURA√á√ÉO');
console.log('='.repeat(50));

console.log('\n‚úÖ Arquivos de configura√ß√£o do EasyPanel:');
console.log('  - easypanel.json (buildpacks + heroku/builder:24)');
console.log('  - Procfile (comando de inicializa√ß√£o)');
console.log('  - .npmrc (configura√ß√µes otimizadas)');
console.log('  - app.json (vari√°veis de ambiente)');

console.log('\n‚úÖ Scripts de build configurados:');
console.log('  - npm run build (compila frontend + backend)');
console.log('  - npm run start (inicia servidor de produ√ß√£o)');
console.log('  - heroku-postbuild (hook para buildpacks)');

console.log('\n‚úÖ Estrutura de deploy:');
console.log('  - Builder: heroku/builder:24');
console.log('  - Runtime: Node.js 18+');
console.log('  - Porta: 8080 (mapeada para 80)');
console.log('  - Health check: /api/diagnostic');

console.log('\nüìã Pr√≥ximos passos para EasyPanel:');
console.log('  1. Fazer commit das configura√ß√µes');
console.log('  2. Criar app no EasyPanel com GitHub');
console.log('  3. Configurar vari√°veis de ambiente');
console.log('  4. Executar deploy');
console.log('  5. Testar funcionamento');

console.log('\nüìñ Documenta√ß√£o completa em:');
console.log('  - EASYPANEL_SETUP.md');
console.log('  - DEPLOY_EASYPANEL.md');

console.log('\nüöÄ Configura√ß√£o conclu√≠da com sucesso!');
